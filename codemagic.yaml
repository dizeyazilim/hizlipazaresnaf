workflows:
  flutter_workflows_ios_sim_debug:
    name: flutter workflows â€¢ iOS Simulator (Debug)
    instance_type: mac_mini_m2
    max_build_duration: 30
    environment:
      flutter: 3.35.3
      xcode: 16.1
      cocoapods: 1.16.2
    cache:
      cache_paths:
        - ~/.pub-cache
        - ios/Pods
        - $HOME/Library/Caches/CocoaPods
        - $HOME/Library/Developer/Xcode/DerivedData
    triggering:
      events: [ push ]
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Flutter precache & pub get
        script: |
          flutter --version
          flutter precache --ios --force
          flutter pub get
      - name: Write clean Podfile (official Flutter pattern)
        script: |
          cat > ios/Podfile <<'PODFILE'
          platform :ios, '13.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          # Read FLUTTER_ROOT from Generated.xcconfig (official way)
          def flutter_root
            gxc = File.expand_path(File.join('..','Flutter','Generated.xcconfig'), __FILE__)
            unless File.exist?(gxc)
              raise "#{gxc} must exist. Run 'flutter pub get' first."
            end
            File.foreach(gxc) do |line|
              m = line.match(/FLUTTER_ROOT\=(.*)/)
              return m[1].strip if m
            end
            raise "FLUTTER_ROOT not found in #{gxc}."
          end

          require File.expand_path(File.join('packages','flutter_tools','bin','podhelper'), flutter_root)

          flutter_ios_podfile_setup

          target 'Runner' do
            # use_frameworks! :linkage => :static   # gerekirse aÃ§
            use_modular_headers!
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            flutter_additional_ios_build_settings(installer)
            installer.pods_project.targets.each do |t|
              t.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
              end
            end
          end
          PODFILE
      - name: Clean & install Pods
        script: |
          rm -rf ios/Pods ios/Podfile.lock
          cd ios
          pod repo update
          pod deintegrate || true
          pod install --verbose
          cd ..
      - name: Build iOS (Simulator Debug, no codesign)
        script: |
          flutter clean
          flutter build ios --simulator --debug --no-codesign
      - name: Zip the .app
        script: |
          APP_DIR="build/ios/iphonesimulator"
          APP_PATH=$(find "$APP_DIR" -maxdepth 1 -name "*.app" | head -n1)
          if [ -z "$APP_PATH" ]; then
            echo "Simulator .app bulunamadÄ±"; exit 1
          fi
          (cd "$APP_DIR" && zip -r "Runner.app.zip" "$(basename "$APP_PATH")" >/dev/null)
          echo "Ready: $APP_DIR/Runner.app.zip"
    artifacts:
      - build/ios/iphonesimulator/*.app
      - build/ios/iphonesimulator/Runner.app.zip

  flutter_workflows_ios_sim_release:
    name: flutter workflows â€¢ iOS Simulator (Release)
    instance_type: mac_mini_m2
    max_build_duration: 30
    environment:
      flutter: 3.35.3
      xcode: 16.1
      cocoapods: 1.16.2
    cache:
      cache_paths:
        - ~/.pub-cache
        - ios/Pods
        - $HOME/Library/Caches/CocoaPods
        - $HOME/Library/Developer/Xcode/DerivedData
    triggering:
      events: [ manual ]  # releaseâ€™i elle Ã§alÄ±ÅŸtÄ±r
    scripts:
      - name: Flutter precache & pub get
        script: |
          flutter --version
          flutter precache --ios --force
          flutter pub get
      - name: Write clean Podfile (official Flutter pattern)
        script: |
          cat > ios/Podfile <<'PODFILE'
          platform :ios, '13.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          def flutter_root
            gxc = File.expand_path(File.join('..','Flutter','Generated.xcconfig'), __FILE__)
            unless File.exist?(gxc)
              raise "#{gxc} must exist. Run 'flutter pub get' first."
            end
            File.foreach(gxc) do |line|
              m = line.match(/FLUTTER_ROOT\=(.*)/)
              return m[1].strip if m
            end
            raise "FLUTTER_ROOT not found in #{gxc}."
          end

          require File.expand_path(File.join('packages','flutter_tools','bin','podhelper'), flutter_root)

          flutter_ios_podfile_setup

          target 'Runner' do
            use_modular_headers!
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            flutter_additional_ios_build_settings(installer)
            installer.pods_project.targets.each do |t|
              t.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
              end
            end
          end
          PODFILE
      - name: Clean & install Pods
        script: |
          rm -rf ios/Pods ios/Podfile.lock
          cd ios
          pod repo update
          pod deintegrate || true
          pod install --verbose
          cd ..
      - name: Build iOS (Simulator Release, no codesign)
        script: |
          flutter clean
          flutter build ios --simulator --release --no-codesign
      - name: Zip the .app
        script: |
          APP_DIR="build/ios/iphonesimulator"
          APP_PATH=$(find "$APP_DIR" -maxdepth 1 -name "*.app" | head -n1)
          if [ -z "$APP_PATH" ]; then
            echo "Simulator .app bulunamadÄ±"; exit 1
          fi
          (cd "$APP_DIR" && zip -r "Runner.app.zip" "$(basename "$APP_PATH")" >/dev/null)
          echo "Ready: $APP_DIR/Runner.app.zip"
    artifacts:
      - build/ios/iphonesimulator/*.app
      - build/ios/iphonesimulator/Runner.app.zip
